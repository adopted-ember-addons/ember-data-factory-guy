{"version":3,"file":"index.js","sources":["../src/mocks/attribute-matcher.js","../src/mocks/maybe-id-url-match.js","../src/mocks/mock-update-request.js","../src/mocks/mock-create-request.js","../src/mocks/mock-get-request.js","../src/mocks/mock-query-request.js","../src/mocks/mock-query-record-request.js","../src/mocks/mock-find-record-request.js","../src/mocks/mock-reload-request.js","../src/mocks/mock-find-all-request.js","../src/mocks/mock-delete-request.js","../src/mocks/mock-any-request.js","../src/mocks/mock-links-request.js","../src/mocks/exposed-request-functions.js","../src/scenario.js","../src/index.js"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { typeOf } from '@ember/utils';\nimport FactoryGuy from '../factory-guy';\nimport { isEmptyObject, isEquivalent } from '../utils/helper-functions';\n\n/**\n This is tricky, but the main idea here is:\n\n #1 Take the keys they want to match and transform them to what the serialized\n version would be ie. company => company_id\n\n #2 Take the matchArgs and turn them into a FactoryGuy payload class by\n FactoryGuy.build(ing) them into a payload\n\n #3 Wrap the request data into a FactoryGuy payload class\n\n #4 Go though the keys from #1 and check that both the payloads from #2/#3 have the\n same values\n\n @param requestData\n @returns {boolean} true is no attributes to match or they all match\n */\nconst attributesMatch = function (requestData, modelName, matchParams) {\n  if (isEmptyObject(matchParams)) {\n    return true;\n  }\n\n  let builder = FactoryGuy.fixtureBuilder(modelName);\n\n  // transform they match keys\n  let matchCheckKeys = Object.keys(matchParams).map((key) => {\n    return builder.transformKey(modelName, key);\n  });\n  // build the match args into a JSONPayload class\n  let buildOpts = { serializeMode: true, transformKeys: true };\n  let expectedData = builder.convertForBuild(modelName, matchParams, buildOpts);\n\n  // wrap request data in a JSONPayload class\n  builder.wrapPayload(modelName, requestData);\n\n  // success if all values match\n  return matchCheckKeys.every((key) => {\n    return isEquivalent(expectedData.get(key), requestData.get(key));\n  });\n};\n\n/**\n This is a mixin used by MockUpdate and MockCreateRequest\n\n Make sure you setup the constructor in the class that uses this mixin\n to set the matchArgs variable\n\n Example:\n\n ```\n constructor(modelName, id) {\n   super(modelName);\n   this.matchArgs = {};\n }\n ```\n\n @param superclass\n @constructor\n */\nconst AttributeMatcher = (superclass) =>\n  class extends superclass {\n    match(matches) {\n      this.matchArgs = matches;\n      return this;\n    }\n\n    /**\n   Update and Create mocks can accept 2 return keys 'attrs' and 'add'\n\n   @param options\n   @returns {Array}\n   */\n    validateReturnsOptions(options) {\n      const responseKeys = Object.keys(options),\n        validReturnsKeys = ['attrs', 'add'],\n        invalidKeys = responseKeys.filter(\n          (key) => !validReturnsKeys.includes(key)\n        );\n\n      assert(\n        `[ember-data-factory-guy] You passed invalid keys for 'returns' function.\n      Valid keys are ${validReturnsKeys}. You used these invalid keys: ${invalidKeys}`,\n        invalidKeys.length === 0\n      );\n\n      return responseKeys;\n    }\n\n    extraRequestMatches(request) {\n      if (this.matchArgs) {\n        let requestBody = request.requestBody;\n        if (typeOf(requestBody) === 'string') {\n          requestBody = JSON.parse(requestBody);\n        }\n        if (typeOf(this.matchArgs) === 'function') {\n          return this.matchArgs(requestBody);\n        } else {\n          return attributesMatch(requestBody, this.modelName, this.matchArgs);\n        }\n      }\n      return true;\n    }\n  };\n\nexport default AttributeMatcher;\n","/**\n This is a mixin used by Mocks that might match on id or not depending if id exists\n\n @param superclass\n @constructor\n */\nconst MaybeIdUrlMatch = (superclass) =>\n  class extends superclass {\n    /**\n   Used by getUrl to => this.get('id')\n\n   For mockDelete: If the id is null, the url will not include the id, and\n   can therefore be used to match any delete for this modelName\n   */\n    get(...args) {\n      if (args[0] === 'id') {\n        return this.id;\n      }\n    }\n\n    /**\n     *\n     * @returns {String} url\n     */\n    getUrl() {\n      let url = super.getUrl();\n      if (!this.id) {\n        url = `${url}/:id`;\n      }\n      return url;\n    }\n  };\n\nexport default MaybeIdUrlMatch;\n","import { assert } from '@ember/debug';\nimport FactoryGuy from '../factory-guy';\nimport MockStoreRequest from './mock-store-request';\nimport AttributeMatcher from './attribute-matcher';\nimport MaybeIdUrlMatch from './maybe-id-url-match';\n\nexport default class MockUpdateRequest extends MaybeIdUrlMatch(\n  AttributeMatcher(MockStoreRequest)\n) {\n  constructor(modelName, { id, model } = {}) {\n    super(modelName, 'updateRecord');\n    this.id = id;\n    this.model = model;\n    this.returnArgs = {};\n    this.matchArgs = {};\n    this.setupHandler();\n  }\n\n  getType() {\n    return FactoryGuy.updateHTTPMethod(this.modelName);\n  }\n\n  /**\n   This returns only accepts attrs key\n\n   These attrs are those attributes or relationships that\n   you would like returned with the model when the update succeeds.\n\n   You can't user returns if you use mockUpdate with only a modelName like:\n   mockUpdate('user'); ( no id specified )\n\n   @param {Object} returns attributes and or relationships to send with payload\n   */\n  returns(returns) {\n    this.validateReturnsOptions(returns);\n\n    assert(\n      `[ember-data-factory-guy] Can't use returns in\n      mockUpdate when update only has modelName and no id`,\n      this.id\n    );\n\n    this.returnArgs = returns.attrs;\n    this.add = returns.add;\n    return this;\n  }\n\n  /**\n   Adapters freak out if update payload is non empty and there is no id.\n\n   So, if you use mockUpdate like this:\n   mockUpdate('user'); ( no id specified ) this mock will return null\n\n   @returns {*}\n   */\n  getResponse() {\n    this.responseJson = null;\n    if (Object.keys(this.returnArgs).length) {\n      let args = Object.assign({}, this.matchArgs, this.returnArgs),\n        json = Object.assign({}, args, { id: this.id });\n      this.responseJson = this.fixtureBuilder.convertForBuild(\n        this.modelName,\n        json\n      );\n    }\n    return super.getResponse();\n  }\n}\n","import { isPresent } from '@ember/utils';\nimport FactoryGuy from '../factory-guy';\nimport MockStoreRequest from './mock-store-request';\nimport AttributeMatcher from './attribute-matcher';\n\nexport default class MockCreateRequest extends AttributeMatcher(\n  MockStoreRequest\n) {\n  constructor(modelName, { model } = {}) {\n    super(modelName, 'createRecord');\n    this.model = model;\n    this.returnArgs = {};\n    this.matchArgs = {};\n    this.setupHandler();\n  }\n\n  getType() {\n    return 'POST';\n  }\n\n  /**\n   This returns only accepts attrs key\n   These attrs are those attributes or relationships that\n   you would like returned with the model when the create succeeds.\n\n   @param {Object} returns attributes and or relationships to return with payload\n   */\n  returns(returns) {\n    this.validateReturnsOptions(returns);\n    this.returnArgs = returns.attrs;\n    return this;\n  }\n\n  /**\n   Unless the id is setup already in the return args, then setup a new id.\n   */\n  modelId() {\n    let returnArgs = this.returnArgs;\n    if (isPresent(returnArgs) && isPresent(returnArgs['id'])) {\n      return returnArgs['id'];\n    } else {\n      let definition = FactoryGuy.findModelDefinition(this.modelName);\n      return definition.nextId();\n    }\n  }\n\n  /**\n   This mock might be called a few times in a row so,\n   Need to clone the responseJson and add id at the very last minute\n   */\n  getResponse() {\n    let args = Object.assign({}, this.matchArgs, this.returnArgs),\n      json = Object.assign({}, args, { id: this.modelId() });\n    this.responseJson = this.fixtureBuilder.convertForBuild(\n      this.modelName,\n      json\n    );\n    return super.getResponse();\n  }\n}\n","/* Disabling the `ember/no-get` lint rule as `MockStoreRequest` and `MockGetRequest` contains a `this.get` method */\n/* eslint-disable ember/no-get */\nimport { assert } from '@ember/debug';\nimport { typeOf } from '@ember/utils';\nimport { isArray } from '@ember/array';\nimport FactoryGuy from '../factory-guy';\nimport Model from '@ember-data/model';\nimport MockStoreRequest from './mock-store-request';\n\nclass MockGetRequest extends MockStoreRequest {\n  constructor(modelName, requestType, { defaultResponse, queryParams } = {}) {\n    super(modelName, requestType);\n    this.queryParams = queryParams;\n    if (defaultResponse !== undefined) {\n      this.setResponseJson(\n        this.fixtureBuilder.convertForBuild(modelName, defaultResponse)\n      );\n    }\n    this.validReturnsKeys = [];\n  }\n\n  /**\n   Used for inspecting the response that this mock will generate\n\n   Usually the args will be an attribute like 'id', but it might\n   also be a number like 0 or 1 for and index to list types.\n\n   Ideally the responseJson is a JSONProxy class so the logic can be handed off there.\n   Otherwise it's a plain object which is rare ( so the logic is not great )\n\n   @param args\n   @returns {*}\n   */\n  get(args) {\n    let json = this.responseJson;\n    if (json) {\n      if (json.get) {\n        return json.get(args);\n      }\n      // if this becomes issue, make this search more robust\n      return json[args];\n    }\n  }\n\n  setValidReturnsKeys(validKeys) {\n    this.validReturnsKeys = validKeys;\n  }\n\n  validateReturnsOptions(options) {\n    const responseKeys = Object.keys(options);\n\n    assert(\n      `[ember-data-factory-guy] You can pass one key to 'returns',\n                you passed these keys: ${responseKeys}`,\n      responseKeys.length === 1\n    );\n\n    const [responseKey] = responseKeys;\n\n    assert(\n      `[ember-data-factory-guy] You passed an invalid keys for 'returns' function.\n      Valid keys are ${this.validReturnsKeys}. You used this invalid key: ${responseKey}`,\n      this.validReturnsKeys.includes(responseKey)\n    );\n\n    return responseKey;\n  }\n\n  returns(options = {}) {\n    let responseKey = this.validateReturnsOptions(options);\n    this.setReturns(responseKey, options);\n    return this;\n  }\n\n  setReturns(responseKey, options) {\n    let json,\n      model,\n      models,\n      modelName = this.modelName;\n\n    switch (responseKey) {\n      case 'id':\n        // if you want to return existing model with an id, set up the json\n        // as if it might be found, but check later during request match to\n        // see if it really exists\n        json = { id: options.id };\n        this.idSearch = true;\n        this.setResponseJson(\n          this.fixtureBuilder.convertForBuild(modelName, json)\n        );\n        break;\n\n      case 'model':\n        model = options.model;\n\n        assert(\n          `[ember-data-factory-guy] argument ( model ) must be a Model instance - found type:'\n          ${typeOf(model)}`,\n          model instanceof Model\n        );\n\n        json = { id: model.id };\n        this.setResponseJson(\n          this.fixtureBuilder.convertForBuild(modelName, json)\n        );\n        break;\n\n      case 'ids': {\n        const store = FactoryGuy.store;\n        models = options.ids.map((id) => store.peekRecord(modelName, id));\n        this.returns({ models });\n        break;\n      }\n      case 'models': {\n        models = options.models;\n        assert(\n          `[ember-data-factory-guy] argument ( models ) must be an array - found type:'\n          ${typeOf(models)}`,\n          isArray(models)\n        );\n\n        json = models.map((model) => ({ id: model.id }));\n\n        json = this.fixtureBuilder.convertForBuild(modelName, json);\n        this.setResponseJson(json);\n        break;\n      }\n      case 'json':\n        json = options.json;\n        if (!json.get) {\n          // need to wrap a payload so the json can at least respond to 'get' method\n          this.fixtureBuilder.wrapPayload(modelName, json);\n        }\n        this.setResponseJson(json);\n        break;\n      case 'attrs': {\n        let currentId = this.responseJson.get('id'),\n          modelParams = Object.assign({ id: currentId }, options.attrs);\n        json = this.fixtureBuilder.convertForBuild(modelName, modelParams);\n        this.setResponseJson(json);\n        break;\n      }\n      case 'headers':\n        this.addResponseHeaders(options.headers);\n        break;\n    }\n  }\n\n  setResponseJson(json) {\n    this.responseJson = json;\n    this.setupHandler();\n  }\n}\n\nexport default MockGetRequest;\n","import MockGetRequest from './mock-get-request';\n\nexport default class MockQueryRequest extends MockGetRequest {\n  /**\n   * By default this query will return a payload of [] or empty array\n   *\n   * @param modelName\n   * @param queryParams\n   */\n  constructor(modelName, queryParams = {}) {\n    super(modelName, 'query', { defaultResponse: [], queryParams });\n    this.setValidReturnsKeys(['models', 'json', 'ids', 'headers']);\n  }\n}\n","import MockGetRequest from './mock-get-request';\n\nexport default class MockQueryRecordRequest extends MockGetRequest {\n  /**\n   * By default this query will return a payload of 'null' or no result\n   *\n   * @param modelName\n   * @param queryParams\n   */\n  constructor(modelName, queryParams = {}) {\n    super(modelName, 'queryRecord', { defaultResponse: null, queryParams });\n    this.setValidReturnsKeys(['model', 'json', 'id', 'headers']);\n  }\n}\n","/* Disabling the following lint rules as `MockStoreRequest` and `MockGetRequest` contain a `this.get` method */\n/* eslint-disable ember/no-get, ember/classic-decorator-no-classic-methods */\nimport FactoryGuy from '../factory-guy';\nimport MockGetRequest from './mock-get-request';\n\nexport default class MockFindRecordRequest extends MockGetRequest {\n  constructor(modelName) {\n    super(modelName, 'findRecord');\n    this.setValidReturnsKeys(['model', 'json', 'id', 'headers']);\n  }\n\n  /**\n   * When using returns({id: id}), this is flagged as an idSearch, so\n   * that at the last moment when this handler is returning the request response,\n   * we can check the store and see if a model with that id exists.\n   *\n   * If not, then this will be a 404 not found error\n   *\n   * @param settings\n   * @returns {*}\n   */\n  extraRequestMatches(settings) {\n    if (this.idSearch) {\n      let model = FactoryGuy.store.peekRecord(this.modelName, this.get('id'));\n      if (!model) {\n        // the match still succeeds but the response is failure\n        this.fails({ status: 404 });\n      }\n    }\n    return super.extraRequestMatches(settings);\n  }\n}\n","import MockFindRecordRequest from './mock-find-record-request';\n\nexport default class MockReloadRequest extends MockFindRecordRequest {\n  constructor(modelName) {\n    super(modelName);\n    this.setValidReturnsKeys(['attrs', 'json', 'headers']);\n  }\n}\n","import MockGetRequest from './mock-get-request';\n\nexport default class MockFindAllRequest extends MockGetRequest {\n  constructor(modelName) {\n    super(modelName, 'findAll', { defaultResponse: [] });\n    this.setValidReturnsKeys(['models', 'json', 'ids', 'headers']);\n  }\n}\n","import MockStoreRequest from './mock-store-request';\nimport MaybeIdUrlMatch from './maybe-id-url-match';\n\nexport default class MockDeleteRequest extends MaybeIdUrlMatch(\n  MockStoreRequest\n) {\n  constructor(modelName, { id, model } = {}) {\n    super(modelName, 'deleteRecord');\n    this.id = id;\n    this.model = model;\n    this.setupHandler();\n  }\n\n  getType() {\n    return 'DELETE';\n  }\n}\n","import MockRequest from './mock-request';\nimport {\n  isEmptyObject,\n  isEquivalent,\n  isPartOf,\n  paramsFromRequestBody,\n  toParams,\n} from '../utils/helper-functions';\n\nexport default class MockAnyRequest extends MockRequest {\n  constructor({ type = 'GET', url, responseText, status = 200 }) {\n    super();\n    this.responseJson = responseText;\n    if (this.isErrorStatus(status)) this.errorResponse = responseText;\n    this.url = url;\n    this.type = type;\n    this.status = status;\n    this.setupHandler();\n  }\n\n  getUrl() {\n    return this.url;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Return some form of object\n   *\n   * @param json\n   * @returns {*}\n   */\n  returns(json) {\n    this.responseJson = json;\n    return this;\n  }\n\n  paramsMatch(request) {\n    if (!isEmptyObject(this.someQueryParams)) {\n      return this._tryMatchParams(request, this.someQueryParams, isPartOf);\n    }\n\n    if (!isEmptyObject(this.queryParams)) {\n      return this._tryMatchParams(request, this.queryParams, isEquivalent);\n    }\n\n    return true;\n  }\n\n  _tryMatchParams(request, handlerParams, comparisonFunction) {\n    let requestParams = request.queryParams;\n\n    if (/POST|PUT|PATCH/.test(this.type)) {\n      requestParams = paramsFromRequestBody(request.requestBody);\n    }\n    return comparisonFunction(toParams(requestParams), toParams(handlerParams));\n  }\n}\n","import { assert } from '@ember/debug';\nimport { typeOf } from '@ember/utils';\nimport { isArray } from '@ember/array';\nimport MockRequest from './mock-request';\nimport FactoryGuy from '../factory-guy';\nimport Model from '@ember-data/model';\nimport { parseUrl } from '../utils/helper-functions';\n\nexport default class MockLinksRequest extends MockRequest {\n  constructor(model, relationshipKey) {\n    super();\n    this.model = model;\n    this.relationshipKey = relationshipKey;\n    this.relationship = this.getRelationship();\n    this.fixtureBuilder = FactoryGuy.fixtureBuilder(this.relationship.type);\n    this.setValidReturnsKeys();\n    this.type = 'GET';\n    this.status = 200;\n    this.extractUrl();\n    this.setupHandler();\n  }\n\n  getRelationship() {\n    let modelClass = this.model.constructor,\n      relationships = modelClass.relationshipsByName,\n      relationship = relationships.get(this.relationshipKey);\n\n    assert(\n      `[ember-data-factory-guy] mockLinks can not find that relationship \n        [${this.relationshipKey}] on model of type ${modelClass.modelName}`,\n      relationship\n    );\n\n    return relationship;\n  }\n\n  setValidReturnsKeys() {\n    const isBelongsTo = this.relationship.kind === 'belongsTo',\n      validKeys = isBelongsTo ? ['model', 'json'] : ['models', 'json'];\n    this.validReturnsKeys = validKeys;\n  }\n\n  /**\n   * Links url's could have query parameters, and this extraction will pull\n   * that apart into the url and query parameters so pretender can make a match\n   */\n  extractUrl() {\n    const url = this.model[this.relationship.kind](this.relationshipKey).link();\n    const [urlPart, queryParams] = parseUrl(url);\n    this.withParams(queryParams);\n    this.url = urlPart;\n  }\n\n  getUrl() {\n    return this.url;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  validateReturnsOptions(options) {\n    const responseKeys = Object.keys(options);\n\n    assert(\n      `[ember-data-factory-guy] You can pass one key to 'returns',\n                you passed these keys: ${responseKeys}`,\n      responseKeys.length === 1\n    );\n\n    const [responseKey] = responseKeys;\n\n    assert(\n      `[ember-data-factory-guy] You passed an invalid keys for 'returns' function.\n      Valid keys are ${this.validReturnsKeys}. You used this invalid key: ${responseKey}`,\n      this.validReturnsKeys.includes(responseKey)\n    );\n\n    return responseKey;\n  }\n\n  returns(options = {}) {\n    let responseKey = this.validateReturnsOptions(options);\n    this.setReturns(responseKey, options);\n    return this;\n  }\n\n  setReturns(responseKey, options) {\n    let json,\n      model,\n      models,\n      modelName = this.relationship.type;\n\n    switch (responseKey) {\n      case 'id': {\n        // if you want to return existing model with an id, set up the json\n        // as if it might be found, but check later during request match to\n        // see if it really exists\n        json = { id: options.id };\n        this.idSearch = true;\n        this.setResponseJson(\n          this.fixtureBuilder.convertForBuild(modelName, json)\n        );\n        break;\n      }\n\n      case 'model':\n        model = options.model;\n\n        assert(\n          `[ember-data-factory-guy] argument ( model ) must be a Model instance - found type:'\n          ${typeOf(model)}`,\n          model instanceof Model\n        );\n\n        json = { id: model.id };\n        this.setResponseJson(\n          this.fixtureBuilder.convertForBuild(modelName, json)\n        );\n        break;\n\n      case 'ids': {\n        const store = FactoryGuy.store;\n        models = options.ids.map((id) => store.peekRecord(modelName, id));\n        this.returns({ models });\n        break;\n      }\n\n      case 'models': {\n        models = options.models;\n\n        assert(\n          `[ember-data-factory-guy] argument ( models ) must be an array - found type:'\n          ${typeOf(models)}`,\n          isArray(models)\n        );\n\n        json = models.map((model) => ({ id: model.id }));\n        json = this.fixtureBuilder.convertForBuild(modelName, json);\n        this.setResponseJson(json);\n        break;\n      }\n\n      case 'json':\n        json = options.json;\n        if (!json.isProxy) {\n          // need to wrap a payload in proxy class if not already done so\n          this.fixtureBuilder.wrapPayload(modelName, json);\n        }\n        this.setResponseJson(json);\n        break;\n\n      case 'headers':\n        this.addResponseHeaders(options.headers);\n        break;\n    }\n  }\n\n  setResponseJson(json) {\n    this.responseJson = json;\n    this.setupHandler();\n  }\n}\n","import { typeOf } from '@ember/utils';\nimport { assert } from '@ember/debug';\nimport Model from '@ember-data/model';\nimport FactoryGuy from '../factory-guy';\nimport MockUpdateRequest from './mock-update-request';\nimport MockCreateRequest from './mock-create-request';\nimport MockQueryRequest from './mock-query-request';\nimport MockQueryRecordRequest from './mock-query-record-request';\nimport MockFindRecordRequest from './mock-find-record-request';\nimport MockReloadRequest from './mock-reload-request';\nimport MockFindAllRequest from './mock-find-all-request';\nimport MockDeleteRequest from './mock-delete-request';\nimport MockAnyRequest from './mock-any-request';\nimport MockLinksRequest from './mock-links-request';\nimport RequestManager from './request-manager';\n\nexport function mock({ type = 'GET', url, responseText, status } = {}) {\n  assert('[ember-data-factory-guy] mock requires at least a url', url);\n\n  return new MockAnyRequest({ type, url, responseText, status });\n}\n\nexport function mockLinks(model, relationshipKey) {\n  assert(\n    '[ember-data-factory-guy] mockLinks requires at least model and relationshipKey',\n    model,\n    relationshipKey\n  );\n\n  return new MockLinksRequest(model, relationshipKey);\n}\n\n/**\n Handling ajax GET for handling finding a model\n You can mock failed find by calling `fails()`\n\n ```js\n // Typically you will use like:\n\n // To return default factory 'user'\n let mock = mockFindRecord('user');\n let userId = mock.get('id');\n\n // or to return custom factory built json object\n let json = build('user', 'with_whacky_name', {isDude: true});\n let mock = mockFindRecord('user').returns({json});\n let userId = json.get('id');\n\n // you could also make the model first and mock that find fails\n let user = make('user')\n let mock = mockFindRecord(user);\n let userId = user.id // or mock.get('id')\n\n // To mock failure case use method fails\n mockFindRecord('user').fails();\n\n // Then to 'find' the user\n store.findRecord('user', userId);\n\n // or in acceptance test\n visit('/user'+userId);\n ```\n\n @param {String} name  name of the fixture ( or modelName ) to find\n @param {String} trait  optional traits (one or more)\n @param {Object} opts  optional fixture options\n */\nexport function mockFindRecord(...args) {\n  let modelName;\n\n  assert(\n    `[ember-data-factory-guy] mockFindRecord requires at least a model\n     name as first parameter`,\n    args.length > 0\n  );\n\n  if (args[0] instanceof Model) {\n    let model = args[0];\n    modelName = model.constructor.modelName;\n    return new MockFindRecordRequest(modelName).returns({ model });\n  }\n\n  modelName = args[0];\n  let json = FactoryGuy.build.apply(FactoryGuy, arguments);\n  return new MockFindRecordRequest(modelName).returns({ json });\n}\n\n/**\n Handling ajax GET for reloading a record\n You can mock failed find by calling fails\n\n ```js\n // Typically you will make a model\n let user = make('user');\n // and then to handle reload, use the mockReload call to mock a reload\n mockReload(user);\n\n // to mock failure case use method fails\n mockReload(user).fails();\n ```\n\n @param {String} type  model type like 'user' for User model, or a model instance\n @param {String} id  id of record to find\n */\nexport function mockReload(...args) {\n  let modelName, id;\n  if (args[0] instanceof Model) {\n    let record = args[0];\n    modelName = record.constructor.modelName;\n    id = record.id;\n  } else if (\n    typeof args[0] === 'string' &&\n    typeof parseInt(args[1]) === 'number'\n  ) {\n    modelName = args[0];\n    id = args[1];\n  }\n\n  assert(\n    '[ember-data-factory-guy] mockReload arguments are a model instance or a model type name and an id',\n    modelName && id\n  );\n\n  let json = FactoryGuy.fixtureBuilder(modelName).convertForBuild(modelName, {\n    id: id,\n  });\n  return new MockReloadRequest(modelName).returns({ json });\n}\n\n/**\n Handling ajax GET for finding all records for a type of model.\n You can mock failed find by passing in success argument as false.\n\n ```js\n // Pass in the parameters you would normally pass into FactoryGuy.makeList,\n // like fixture name, number of fixtures to make, and optional traits,\n // or fixture options\n let mockFindAll = mockFindAll('user', 2, 'with_hats');\n\n // or to return custom FactoryGuy built json object\n let json = FactoryGuy.buildList('user', 'with_whacky_name', {isDude: true});\n let mockFindAll = mockFindAll('user').returns({json});\n\n store.findAll('user').then(function(users){\n      // 2 users, first with whacky name, second isDude\n   });\n ```\n\n @param {String} name  name of the fixture ( or model ) to find\n @param {Number} number  number of fixtures to create\n @param {String} trait  optional traits (one or more)\n @param {Object} opts  optional fixture options\n */\nexport function mockFindAll(...args) {\n  let modelName = args[0];\n\n  assert(\n    `[ember-data-factory-guy] mockFindAll requires at least a model\n     name as first parameter`,\n    args.length > 0\n  );\n\n  let mock = new MockFindAllRequest(modelName);\n\n  if (args.length > 1) {\n    let json = FactoryGuy.buildList.apply(FactoryGuy, args);\n    mock.returns({ json });\n  }\n\n  return mock;\n}\n\n/**\n Handling ajax GET for finding all records for a type of model with query parameters.\n\n\n ```js\n\n // Create model instances\n let users = FactoryGuy.makeList('user', 2, 'with_hats');\n\n // Pass in the array of model instances as last argument\n mockQuery('user', {name:'Bob', age: 10}).returns({models: users});\n\n store.query('user', {name:'Bob', age: 10}}).then(function(userInstances){\n     // userInstances will be the same of the users that were passed in\n   })\n ```\n\n By omitting the last argument (pass in no records), this simulates a findQuery\n request that returns no records\n\n ```js\n // Simulate a query that returns no results\n mockQuery('user', {age: 10000});\n\n store.query('user', {age: 10000}}).then(function(userInstances){\n     // userInstances will be empty\n   })\n ```\n\n @param {String} modelName  name of the mode like 'user' for User model type\n @param {String} queryParams  the parameters that will be queried\n @param {Array}  array of Model records to be 'returned' by query\n */\nexport function mockQuery(modelName, queryParams = {}) {\n  assert(\n    '[ember-data-factory-guy] The second argument ( queryParams ) must be an object',\n    typeOf(queryParams) === 'object'\n  );\n\n  return new MockQueryRequest(modelName, queryParams);\n}\n\n/**\n Handling ajax GET for finding one record for a type of model with query parameters.\n\n\n ```js\n\n // Create json payload\n let json = FactoryGuy.build('user');\n\n // Pass in the json in a returns method\n mockQueryRecord('user', {name:'Bob', age: 10}).returns({json});\n\n store.query('user', {name:'Bob', age: 10}}).then(function(userInstance){\n     // userInstance will be created from the json payload\n   })\n ```\n\n ```js\n\n // Create model instance\n let user = FactoryGuy.make('user');\n\n // Pass in the array of model instances in the returns method\n mockQueryRecord('user', {name:'Bob', age: 10}).returns({model:user});\n\n store.query('user', {name:'Bob', age: 10}}).then(function(userInstance){\n     // userInstance will be the same of the users that were passed in\n   })\n ```\n\n By not using returns method to return anything, this simulates a\n store.queryRecord request that returns no records\n\n ```js\n // Simulate a store.queryRecord that returns no results\n mockQueryRecord('user', {age: 10000});\n\n store.queryRecord('user', {age: 10000}}).then(function(userInstance){\n     // userInstance will be empty\n   })\n ```\n\n @param {String} modelName  name of the mode like 'user' for User model type\n @param {String} queryParams  the parameters that will be queried\n @param {Object|Model}  JSON object or Model record to be 'returned' by query\n */\nexport function mockQueryRecord(modelName, queryParams) {\n  if (queryParams) {\n    assert(\n      'The second argument ( queryParams ) must be an object',\n      typeOf(queryParams) === 'object'\n    );\n  }\n\n  return new MockQueryRecordRequest(modelName, queryParams);\n}\n\n/**\n Handling ajax POST ( create record ) for a model.\n\n ```js\n mockCreate('post')\n mockCreate('post').match({title: 'foo'});\n mockCreate('post').match({title: 'foo', user: user});\n mockCreate('post').returns({createdAt: new Date()});\n mockCreate('post').match({title: 'foo'}).returns({createdAt: new Date()});\n mockCreate('post').match({title: 'foo'}.fails();\n ```\n\n match - attributes that must be in request json,\n returns - attributes to include in response json,\n fails - can include optional status and response attributes\n\n ```js\n mockCreate('project').fails({\n      status: 422, response: {errors: {name: ['Moo bad, Bahh better']}}\n    });\n ```\n\n Note:\n 1) Any attributes in match will be added to the response json automatically,\n so you don't need to include them in the returns hash.\n\n 2) As long as all the match attributes are found in the record being created,\n the create will succeed. In other words, there may be other attributes in the\n createRecord call, but you don't have to match them all. For example:\n\n ```js\n mockCreate('post').match({title: 'foo'});\n store.createRecord('post', {title: 'foo', created_at: new Date()})\n ```\n\n 2) If you match on a belongsTo association, you don't have to include that in the\n returns hash either.\n\n @param {String} modelName  name of model you're creating like 'profile' for Profile\n */\nexport function mockCreate(...args) {\n  let model, modelName;\n  if (args[0] instanceof Model) {\n    model = args[0];\n    modelName = model.constructor.modelName;\n  } else {\n    if (typeof args[0] === 'string') {\n      [modelName] = args;\n    }\n  }\n\n  assert(\n    `[ember-data-factory-guy] To mockUpdate pass in a model instance or a modelName`,\n    modelName\n  );\n\n  return new MockCreateRequest(modelName, { model });\n}\n\n/**\n Handling ajax PUT ( update record ) for a model type. You can mock\n failed update by calling 'fails' method after setting up the mock\n\n ```js\n // Typically you will make a model\n let user = make('user');\n // and then to handle update, use the mockUpdate call to mock a update\n mockUpdate(user);\n or\n // mockUpdate('user', user.id);\n or\n // just the model type\n // mockUpdate('user');\n\n // and to mock failure case use method fails\n mockUpdate(user).fails();\n ```\n\n @param {String} type  model type like 'user' for User model, or a model instance\n @param {String} id  id of record to update\n @param {Object} options options object\n */\nexport function mockUpdate(...args) {\n  let model, modelName, id;\n\n  if (args[0] instanceof Model) {\n    model = args[0];\n    id = model.id;\n    modelName = model.constructor.modelName;\n  } else {\n    if (typeof args[0] === 'string') {\n      [modelName, id] = args;\n    }\n  }\n\n  assert(\n    '[ember-data-factory-guy] To mockUpdate pass in a model instance or a modelName and an id or just a modelName',\n    modelName\n  );\n\n  return new MockUpdateRequest(modelName, { id, model });\n}\n\n/**\n Handling ajax DELETE ( delete record ) for a model type. You can mock\n failed delete by calling 'fails' method after setting up the mock\n\n @param {String|Model} type|model model type like 'user' for User model or Model record\n @param {String} id optional id of record to delete\n */\nexport function mockDelete(...args) {\n  let model, modelName, id;\n\n  if (args[0] instanceof Model) {\n    model = args[0];\n    id = model.id;\n    modelName = model.constructor.modelName;\n  } else if (typeof args[0] === 'string') {\n    [modelName, id] = args;\n  }\n\n  assert(\n    `[ember-data-factory-guy] mockDelete requires at least a model type name`,\n    modelName\n  );\n\n  return new MockDeleteRequest(modelName, { id, model });\n}\n\n/**\n Returns the Pretender instance used for the mocks.\n */\nexport function getPretender() {\n  return RequestManager.getPretender();\n}\n","import FactoryGuy, {\n  make,\n  makeNew,\n  makeList,\n  build,\n  buildList,\n  attributesFor,\n} from './factory-guy';\nimport {\n  mockFindRecord,\n  mockFindAll,\n  mockReload,\n  mockQuery,\n  mockQueryRecord,\n  mockCreate,\n  mockUpdate,\n  mockDelete,\n  mock,\n} from './mocks/exposed-request-functions';\n\nexport default class {\n  constructor() {\n    this.make = make;\n    this.makeNew = makeNew;\n    this.makeList = makeList;\n    this.build = build;\n    this.buildList = buildList;\n    this.attributesFor = attributesFor;\n\n    this.mockFindRecord = mockFindRecord;\n    this.mockFindAll = mockFindAll;\n    this.mockReload = mockReload;\n    this.mockQuery = mockQuery;\n    this.mockQueryRecord = mockQueryRecord;\n    this.mockUpdate = mockUpdate;\n    this.mockCreate = mockCreate;\n    this.mockDelete = mockDelete;\n    this.mock = mock;\n\n    this.store = FactoryGuy.store;\n  }\n\n  static settings(opts = {}) {\n    FactoryGuy.settings(opts);\n  }\n\n  run() {}\n\n  include(scenarios) {\n    (scenarios || []).forEach((Scenario) => new Scenario().run());\n  }\n}\n","import { getContext } from '@ember/test-helpers';\nimport FactoryGuy, {\n  make,\n  makeNew,\n  makeList,\n  build,\n  buildList,\n  attributesFor,\n} from './factory-guy';\n\nimport {\n  mockFindRecord,\n  mockFindAll,\n  mockReload,\n  mockQuery,\n  mockQueryRecord,\n  mockCreate,\n  mockUpdate,\n  mockDelete,\n  mock,\n  mockLinks,\n  getPretender,\n} from './mocks/exposed-request-functions';\n\nimport JSONAPIFixtureBuilder from './builder/jsonapi-fixture-builder';\nimport RESTFixtureBuilder from './builder/rest-fixture-builder';\nimport JSONFixtureBuilder from './builder/json-fixture-builder';\nimport ActiveModelFixtureBuilder from './builder/active-model-fixture-builder';\n\nimport Scenario from './scenario';\nimport MissingSequenceError from './missing-sequence-error';\n\nexport default FactoryGuy;\n\nexport { make, makeNew, makeList, build, buildList, attributesFor };\n\nexport {\n  mockFindRecord,\n  mockFindAll,\n  mockReload,\n  mockQuery,\n  mockQueryRecord,\n  mockCreate,\n  mockUpdate,\n  mockDelete,\n  mock,\n  mockLinks,\n  getPretender,\n};\n\nexport {\n  JSONFixtureBuilder,\n  RESTFixtureBuilder,\n  JSONAPIFixtureBuilder,\n  ActiveModelFixtureBuilder,\n};\n\nexport { Scenario, MissingSequenceError };\n\n/**\n * Setup and teardown code, intended to be called with qunit hooks so that it can run code before & after each test.\n */\nexport function setupFactoryGuy(hooks) {\n  hooks.beforeEach(function () {\n    const { owner } = getContext();\n    FactoryGuy.setStore(owner.lookup('service:store'));\n  });\n\n  hooks.afterEach(function () {\n    FactoryGuy.reset();\n  });\n}\n"],"names":["attributesMatch","requestData","modelName","matchParams","isEmptyObject","builder","FactoryGuy","fixtureBuilder","matchCheckKeys","Object","keys","map","key","transformKey","buildOpts","serializeMode","transformKeys","expectedData","convertForBuild","wrapPayload","every","isEquivalent","get","AttributeMatcher","superclass","match","matches","matchArgs","validateReturnsOptions","options","responseKeys","validReturnsKeys","invalidKeys","filter","includes","assert","length","extraRequestMatches","request","requestBody","typeOf","JSON","parse","MaybeIdUrlMatch","args","id","getUrl","url","MockUpdateRequest","MockStoreRequest","constructor","model","returnArgs","setupHandler","getType","updateHTTPMethod","returns","attrs","add","getResponse","responseJson","assign","json","MockCreateRequest","modelId","isPresent","definition","findModelDefinition","nextId","MockGetRequest","requestType","defaultResponse","queryParams","undefined","setResponseJson","setValidReturnsKeys","validKeys","responseKey","setReturns","models","idSearch","Model","store","ids","peekRecord","isArray","currentId","modelParams","addResponseHeaders","headers","MockQueryRequest","MockQueryRecordRequest","MockFindRecordRequest","settings","fails","status","MockReloadRequest","MockFindAllRequest","MockDeleteRequest","MockAnyRequest","MockRequest","type","responseText","isErrorStatus","errorResponse","paramsMatch","someQueryParams","_tryMatchParams","isPartOf","handlerParams","comparisonFunction","requestParams","test","paramsFromRequestBody","toParams","MockLinksRequest","relationshipKey","relationship","getRelationship","extractUrl","modelClass","relationships","relationshipsByName","isBelongsTo","kind","link","urlPart","parseUrl","withParams","isProxy","mock","mockLinks","mockFindRecord","build","apply","arguments","mockReload","record","parseInt","mockFindAll","buildList","mockQuery","mockQueryRecord","mockCreate","mockUpdate","mockDelete","getPretender","RequestManager","make","makeNew","makeList","attributesFor","opts","run","include","scenarios","forEach","Scenario","setupFactoryGuy","hooks","beforeEach","owner","getContext","setStore","lookup","afterEach","reset"],"mappings":"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"}